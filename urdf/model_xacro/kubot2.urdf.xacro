<?xml version="1.0"?>
<robot name="kubot_robot"
	xmlns:xacro="https://ros.org/wiki/xacro">

	<xacro:include filename="$(find kubot_description)/urdf/kubot_properties.urdf.xacro" />

	<xacro:property name="base_mass" value="4.2" />
	<xacro:property name="base_radius" value="0.320" />
	<xacro:property name="base_length" value="0.320" />
	<xacro:property name="base_width" value="0.145" />

	<xacro:property name="wheel_mass" value="0.1" />
	<xacro:property name="wheel_radius" value="0.0815" />
	<xacro:property name="wheel_length" value="0.020" />
	<xacro:property name="wheel_width" value="0.0" />
	<xacro:property name="wheel_joint_x" value="0.00" />
	<xacro:property name="wheel_joint_y" value="0.122" />
	<xacro:property name="wheel_joint_z" value="0.080" />

	<xacro:property name="caster_mass" value="0.05" />
	<xacro:property name="caster_radius" value="0.03" />
	<xacro:property name="caster_length" value="0.03" />
	<xacro:property name="caster_width" value="0.03" />
	<xacro:property name="caster_joint_x" value="0.164" />
	<xacro:property name="caster_joint_y" value="0.0" />
	<xacro:property name="caster_joint_z" value="0.015" />

	<xacro:macro name="base">
		<!-- Robot Frame  a.k.a base_link -->
		<link name="base_link">
			<visual>
				<origin xyz="0 0 0" rpy="0 0 0" />
				<geometry>
					<mesh filename="package://kubot_description/meshes/robot_frame/$(arg model)/base_link.stl" scale="0.001 0.001 0.001" />
				</geometry>
				<xacro:material_orange />
			</visual>

			<collision>
				<origin xyz="-0.05 0 ${base_width/2+0.02}" rpy="0 0 0" />
				<geometry>
					<cylinder length="${base_width}" radius="${base_radius/1.6}" />
				</geometry>
			</collision>

			<inertial>
				<origin xyz="-0.05 0 ${base_width/2+0.02} " rpy="0 0 0" />
				<xacro:box_inertial_matrix m="${base_mass}" a="${base_radius}" b="${base_length}" c="${base_width}" />
			</inertial>
		</link>

		<!-- R1 Frame a.k.a adornment -->
		<link name="r1_frame">
			<visual>
				<origin xyz="0 0 0" rpy="0 0 0" />
				<geometry>
					<mesh filename="package://kubot_description/meshes/robot_frame/$(arg model)/r1_frame.stl" scale="0.001 0.001 0.001" />
				</geometry>
				<xacro:material_orange />
			</visual>

			<inertial>
				<origin xyz="0 0 0" rpy="0 0 0" />
				<xacro:box_inertial_matrix m="0.001" a="0.001" b="0.001" c="0.001" />
			</inertial>
		</link>

		<!-- Logo Frame a.k.a adornment -->
		<link name="logo_frame">
			<visual>
				<origin xyz="0.01 0 0" rpy="0 0 0" />
				<geometry>
					<mesh filename="package://kubot_description/meshes/robot_frame/$(arg model)/logo_frame.stl" scale="0.0015 0.0015 0.001" />
				</geometry>
				<xacro:material_white />
			</visual>

			<inertial>
				<origin xyz="0 0 0" rpy="0 0 0" />
				<xacro:box_inertial_matrix m="0.001" a="0.001" b="0.001" c="0.001" />
			</inertial>
		</link>

		<!-- Right Wheel Frame-->
		<link name="wheel_right_link">
			<visual>
				<origin xyz="0 0 0" rpy="0 0 0" />
				<geometry>
					<mesh filename="package://kubot_description/meshes/robot_frame/$(arg model)/wheel_link.stl" scale="0.001 0.001 0.001" />
				</geometry>
				<xacro:material_black />
			</visual>

			<collision>
				<origin xyz="0 0 0" rpy="${M_PI/2} 0 0" />
				<geometry>
					<cylinder length="${wheel_length}" radius="${wheel_radius}" />
				</geometry>
			</collision>

			<inertial>
				<origin xyz="0 0 0" rpy="${M_PI/2} 0 0" />
				<xacro:cylinder_inertial_matrix m="${wheel_mass}" r="${wheel_radius}" h="${wheel_length}" />
			</inertial>
		</link>

		<!-- Left Wheel Frame-->
		<link name="wheel_left_link">
			<visual>
				<origin xyz="0 0 0" rpy="0 0 0" />
				<geometry>
					<mesh filename="package://kubot_description/meshes/robot_frame/$(arg model)/wheel_link.stl" scale="0.001 0.001 0.001" />
				</geometry>
				<xacro:material_black />
			</visual>

			<collision>
				<origin xyz="0 0 0" rpy="${M_PI/2} 0 0" />
				<geometry>
					<cylinder length="${wheel_length}" radius="${wheel_radius}" />
				</geometry>
			</collision>

			<inertial>
				<origin xyz="0 0 0" rpy="${M_PI/2} 0 0" />
				<xacro:cylinder_inertial_matrix m="${wheel_mass}" r="${wheel_radius}" h="${wheel_length}" />
			</inertial>
		</link>

		<!-- Rear Caster Frame -->
		<link name="rear_caster_link">
			<visual>
				<origin xyz="0 0 0" rpy="0 0 0" />
				<geometry>
					<box size="${caster_radius} ${caster_length} ${caster_width}" />
				</geometry>
				<xacro:material_white />
			</visual>

			<collision>
				<origin xyz="0 0 0" rpy="0 0 0" />
				<geometry>
					<box size="${caster_radius} ${caster_length} ${caster_width}" />
				</geometry>
			</collision>

			<inertial>
				<origin xyz="0 0 0" rpy="0 0 0" />
				<xacro:sphere_inertial_matrix m="${caster_mass}" r="${caster_radius}" />
			</inertial>
		</link>

		<!-- Define Joint -->
		<joint name="r1_joint" type="fixed">
			<parent link="base_link" />
			<child link="r1_frame" />
		</joint>

		<joint name="logo_joint" type="fixed">
			<parent link="base_link" />
			<child link="logo_frame" />
		</joint>

		<joint name="wheel_right_joint" type="continuous">
			<parent link="base_link" />
			<child link="wheel_right_link" />
			<origin xyz="${wheel_joint_x} ${-1*wheel_joint_y} ${wheel_joint_z}" rpy="0 0 ${M_PI}" />
			<axis xyz="0 -1 0" />
		</joint>

		<joint name="wheel_left_joint" type="continuous">
			<parent link="base_link" />
			<child link="wheel_left_link" />
			<origin xyz="${wheel_joint_x} ${wheel_joint_y} ${wheel_joint_z}" rpy="0 0 0" />
			<axis xyz="0 1 0" />
		</joint>

		<joint name="rear_caster_joint" type="fixed">
			<origin xyz="${-1*caster_joint_x} ${caster_joint_y} ${caster_joint_z}" rpy="0 0 0" />
			<parent link="base_link" />
			<child link="rear_caster_link" />
		</joint>

		<!-- Define Gazebo -->
		<gazebo reference="base_link">
			<material>Gazebo/Orange</material>
		</gazebo>

		<gazebo reference="r1_frame">
			<material>Gazebo/Orange</material>
		</gazebo>

		<gazebo reference="logo_frame">
			<material>Gazebo/White</material>
		</gazebo>

		<gazebo reference="wheel_right_link">
			<mu1>100000</mu1>
			<mu2>100000</mu2>
			<kp>500000.0</kp>
			<kd>1.0</kd>
			<minDepth>0.001</minDepth>
			<maxVel>1.0</maxVel>
			<fdir1>0 1 0</fdir1>
			<material>Gazebo/Black</material>
		</gazebo>

		<gazebo reference="wheel_left_link">
			<mu1>100000</mu1>
			<mu2>100000</mu2>
			<kp>500000.0</kp>
			<kd>1.0</kd>
			<minDepth>0.001</minDepth>
			<maxVel>1.0</maxVel>
			<fdir1>0 1 0</fdir1>
			<material>Gazebo/Black</material>
		</gazebo>

		<gazebo reference="rear_caster_link">
			<mu1>0.1</mu1>
			<mu2>0.1</mu2>
			<kp>1000000.0</kp>
			<kd>100.0</kd>
			<minDepth>0</minDepth>
			<maxVel>0.01</maxVel>

			<material>Gazebo/Black</material>
		</gazebo>

		<gazebo>
			<plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">
				<commandTopic>cmd_vel</commandTopic>
				<odometryTopic>odom</odometryTopic>
				<odometryFrame>odom</odometryFrame>
				<odometrySource>world</odometrySource>
				<publishOdom>true</publishOdom>
				<publishOdomTF>true</publishOdomTF>
				<robotBaseFrame>footprint</robotBaseFrame>
				<publishWheelTF>false</publishWheelTF>
				<publishTf>true</publishTf>
				<publishWheelJointState>true</publishWheelJointState>
				<legacyMode>false</legacyMode>
				<updateRate>30</updateRate>
				<leftJoint>wheel_left_joint</leftJoint>
				<rightJoint>wheel_right_joint</rightJoint>
				<wheelSeparation>${wheel_joint_y*2}</wheelSeparation>
				<wheelDiameter>${2*wheel_radius}</wheelDiameter>
				<wheelAcceleration>1</wheelAcceleration>
				<wheelTorque>10</wheelTorque>
				<rosDebugLevel>na</rosDebugLevel>
			</plugin>
		</gazebo>

	</xacro:macro>

	<!-- Lidar Frame a.k.a Lidar Pos-->
	<xacro:property name="lidar_joint_xyz" value="-0.05 0 0.194" />
	<xacro:property name="lidar_joint_rpy" value="0 0 0" />

	<!-- Camera a.k.a Camera Pos -->
	<xacro:property name="camera_joint_xyz" value="0.1 0 0.14" />
	<xacro:property name="camera_joint_rpy" value="0 0 0" />

</robot>